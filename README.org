* Po potoce - by the stream

Indirect tactics, efficiently applied, are inexhaustible as Heaven and Earth,
unending as the flow of rivers and streams -- Sun Tzu, The Art of War

My talk about how I got to understand reactive streams through C# and moved that
knowledge to ClojureScript. Just to have my notion of programming changed
forever.

** Story
*** Childhood
**** Going by the streams
**** Using stones and ice in the winter as path
**** What the water does to the surroundings
**** You could get to places you can't normaly
*** C#
**** Long running problem with deployment/watchdog/heartbeat SW
***** Interprocess communication
***** Helper processes
***** Several KLs of code
***** Creator is on parental leave
**** Rewrite in same spirit, just leave out what is not needed anymore
***** Big chunks of code just copied
***** Same architectur
***** Programmer got ill
***** I took over and wanted to test it
**** New start with ReactiveX
***** Timer loop based checks
***** Subscribing to only right info through LINQ
***** Library with fully tested code
***** Final aplications is only couple of lines, mostly config and orchestration
*** ClojureScript
**** Showrum
***** Simple markdown presentations
***** More decks
**** Maps&functions
***** Unbeareable after while
***** Too much checks and conditions
**** Potok
*** Reactives
**** RX.js
**** Beicon - Funcool
***** Sister lib of Potok - wraper of RX.js
**** Potok - Funcool
***** Czech word means stream
***** Reactive streams
**** Some promisses
*** New Beginning
**** Whats the fuss
**** It's just queque
**** You can stream too
**** IOT
** Proposal
*** https://eventil.com/events/polyconf-17/submissions/new
*** Abstract
Story of how work in C# I didn't liked, brought my attention to reactive streams
which I transplanted to ClojureScript work I love (Polyglot you see ;-). And I
will try to convince you both that ClojureScript is lovely and even better with
reactive streams.

But the story starts in my childhood in the mountain area of the north bohemia,
where we were going by the streams and ends with what I see as the new beginning
for my attitude to programming.
*** Private abstract
The main thing is to show reactive streams and how to use them on the web, but
side themes lies in how we are actually modeling after the nature, and how
mental transfer between not really similar languages, can lead to great benefit
of the creator.
